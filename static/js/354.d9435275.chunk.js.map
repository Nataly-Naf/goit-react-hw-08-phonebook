{"version":3,"file":"static/js/354.d9435275.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactsList/Contacts.styled.js","components/ContactsList/ContactsList.js","components/FilterForm/FilterForm.styled.js","components/FilterForm/FilterForm.js","components/NameForm/NameForm.styled.js","components/NameForm/NameForm.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectFilteredContacts = createSelector([selectContacts, selectFilter],\n(contacts, filter)=>{\n   return contacts.filter(\n  ({ name }) => name.toLowerCase().includes(filter.toLowerCase())\n  )})\n\n\n\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\nmargin:0;\npadding: 0;\nlist-style:none;\n\n`\n\nexport const ListItem = styled.li`\nmargin-bottom: 10px;\npadding: 0;\nfont-weight: 500;\nfont-size:18px;\n\n\n\n`\nexport const ListBtn = styled.button`\nbackground-color: lightblue;\npadding: 0;\nborder-radius: 5px;\nwidth:60px;\nheight:20px;\n  font-size: 12px;\n  font-weight: 700; \n  border:none;\n  outline: solid grey 1px;\n\n  &:hover {\n background-color:lightgreen;\n  }\n\n`","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, ListBtn } from './Contacts.styled';\nimport { deleteContact } from 'redux/operations';\nimport { selectFilteredContacts } from 'redux/selectors';\n// import { selectContacts } from 'redux/selectors';\n// import { selectFilter } from 'redux/selectors';\n\n\nexport const ContactsList = () => {\n\n  \n  const dispatch = useDispatch();\n  const handleDelete = (id) => { console.log(id); dispatch(deleteContact(id)) }\n  \n  // const filteredContacts = savedContacts.filter(\n  // ({ name }) => name.toLowerCase().includes(savedFilter.toLowerCase())\n  // )\n  const filteredContacts = useSelector(selectFilteredContacts)\n\n\n  return (\n    <List>\n      {filteredContacts.map(contact => {\n        return (\n          <ListItem key={contact.id}>\n            {contact.name} {contact.number}\n            <ListBtn onClick={() => dispatch(handleDelete(contact.id))}>\n              Delete\n            </ListBtn>{' '}\n          </ListItem>        );\n      })}\n    </List>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FilterInput = styled.input`\nmargin:0;\npadding: 0;\nborder-radius: 5px;\nwidth:270px;\nmargin-bottom: 30px;\n\n`","import { useEffect, useState } from 'react';\nimport { FilterInput } from './FilterForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contactsSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const FilterForm = () => {\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setFilter(value));\n  }, [value, dispatch]);\n\n  const savedFilter = useSelector(selectFilter);\n\n  return (\n    <div>\n      <p>Find contact by name</p>\n      <FilterInput\n        onChange={event => {\n          setValue(event.target.value);\n        }}\n        type=\"text\"\n        placeholder=\"Find by name\"\n        value={savedFilter}\n      />\n    </div>\n  );\n};\n","import { Field, Form } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const StyledForm = styled(Form)`\nmargin:0;\npadding: 0;\ndisplay: flex;\nmargin-bottom: 20px;\nflex-direction: column;\ngap:20px;\n\n`\n\nexport const StyledField = styled(Field)`\nborder-radius: 5px;\nwidth: 350px;\nmargin-left: 10px;\n\n`\n\nexport const AddBtn = styled.button`\nbackground-color: lightblue;\npadding: 0;\nborder-radius: 5px;\nwidth:150px;\nheight:30px;\n  font-size: 12px;\n  font-weight: 700; \n  border:none;\n  outline: solid grey 1px;\n  \n\n  &:hover {\n background-color:#3f51b5;\n  }\n\n`","import { Formik, ErrorMessage } from 'formik';\nimport { useState } from 'react';\nimport * as Yup from 'yup';\nimport { StyledForm, AddBtn, StyledField } from './NameForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst formSquema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.number().required('Required'),\n});\nexport const NameForm = () => {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(0);\n  console.log(value);\n  const contacts=useSelector(selectContacts)\n\n\n  const handleInputChange = evt => {\n    const { value, name } = evt.target;\n    setValue({ [name]: value.trim() });\n  };\n\n  const handleSubmit = (values, actions) => {\n     const isInContacts = contacts.find(({ name }) => name.toLowerCase() === values.name.toLowerCase())\n    if (isInContacts) {\n  return alert(`This contact is in your contacts`)\n    } \n      console.log(values);\n\n    values.id = nanoid();\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ id: nanoid(), name: '', phone: '' }}\n      validationSchema={formSquema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <label>\n          {' '}\n          Name\n          <StyledField\n            name=\"name\"\n            onInput={handleInputChange}\n            placeholder=\"Name\"\n          />\n          <ErrorMessage name=\"name\" />\n        </label>\n\n        <label>\n          {' '}\n          Number\n          <StyledField\n            name=\"number\"\n            onInput={handleInputChange}\n            placeholder=\"number\"\n          />\n          <ErrorMessage name=\"number\" />\n        </label>\n\n        <AddBtn type=\"submit\">Add contact</AddBtn>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { FilterForm } from 'components/FilterForm/FilterForm';\nimport { NameForm } from 'components/NameForm/NameForm';\nimport { UserMenu } from 'components/UserMenu/UserMenu';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <UserMenu />\n      <NameForm />\n      <FilterForm />\n      {isLoading && !error && <b>Loading in progress...</b>}\n      <ContactsList />\n    </div>\n  );\n};\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","_ref","name","toLowerCase","includes","List","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","ListBtn","_templateObject3","ContactsList","dispatch","useDispatch","filteredContacts","useSelector","_jsx","children","map","contact","_jsxs","number","onClick","id","console","log","deleteContact","FilterInput","FilterForm","_useState","useState","_useState2","_slicedToArray","value","setValue","useEffect","setFilter","savedFilter","onChange","event","target","type","placeholder","StyledForm","Form","StyledField","Field","AddBtn","formSquema","Yup","shape","min","max","required","NameForm","handleInputChange","evt","_evt$target","_defineProperty","trim","Formik","initialValues","nanoid","phone","validationSchema","onSubmit","values","actions","find","alert","addContact","resetForm","onInput","ErrorMessage","Contacts","fetchContacts","UserMenu"],"sourceRoot":""}