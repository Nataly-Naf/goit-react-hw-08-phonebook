{"version":3,"file":"static/js/63.bc38b87f.chunk.js","mappings":"gUAeaA,GAAMC,EAAAA,EAAAA,GAAO,OAE1BD,EAAIE,YAAc,MAqBX,IAAMC,GAASC,EAAAA,EAAAA,IAA+B,SACnDC,EACAC,GAEA,IAAQC,EAAwCF,EAAxCE,KAAAC,EAAwCH,EAAlCI,cAAAA,OAAAA,IAAgB,KAASC,GAAAA,EAAAA,EAAAA,GAASL,EAAAA,GAE1CM,EAA4BF,EAC9B,CAAEG,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UACzD,CAAC,EAEL,OACE,SAACd,GAAAA,EAAAA,EAAAA,GAAAA,CACCM,IAAAA,EACAS,QAASR,EACTS,OAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACKL,GAAAA,CAAAA,EAAAA,CACHM,WAAY,EACZC,SAAU,KAERR,GAGV,IAEAP,EAAOD,YAAc,UAECE,EAAAA,EAAAA,IAA+B,SACnDC,EACAC,GAEA,IAAQC,EAAkBF,EAAlBE,KAASG,GAAAA,EAAAA,EAAAA,GAASL,EAAAA,GAC1B,OAAO,SAACF,GAAAA,EAAAA,EAAAA,GAAAA,CAAOI,KAAAA,EAAYD,IAAAA,EAAUa,aAAa,UAAaT,GACjE,IAEOR,YAAc,S,mCCtERkB,E,QAASC,QAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gPCO7BC,EAAgB,CAAEC,SAAU,GAAIC,MAAO,GAAIC,SAAU,IACrDC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,SAAUI,EAAAA,KACVH,MAAOG,EAAAA,KAAaH,QACpBC,SAAUE,EAAAA,KAAaE,IAAI,EAAG,yBAGnBC,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAajB,OACEC,EAAAA,EAAAA,KAACnC,EAAG,CAAAoC,UACFD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLb,cAAeA,EACfc,iBAAkBV,EAClBW,SAhBe,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UAC9BC,QAAQC,IAAIJ,GACZP,GACEY,EAAAA,EAAAA,IAAS,CACPC,KAAMN,EAAOf,SACbC,MAAOc,EAAOd,MACdC,SAAUa,EAAOb,YAGrBe,GACF,EAM6BN,UAEvBW,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAEC,aAAa,MAAKb,SAAA,EACvBW,EAAAA,EAAAA,MAACG,EAAAA,EAAS,CAAEC,QAAQ,WAAUf,SAAA,CAAC,YAE7BD,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CAEJC,KAAK,OACLP,KAAK,WACLQ,UAAQ,KAEVnB,EAAAA,EAAAA,KAAA,QAAAC,UACED,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,mBAGvBC,EAAAA,EAAAA,MAACG,EAAAA,EAAS,CAACC,QAAQ,QAAOf,SAAA,CAAC,SAEzBD,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACUC,KAAK,QACnBP,KAAK,QACLQ,UAAQ,KAEVnB,EAAAA,EAAAA,KAAA,QAAAC,UACED,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,gBAGvBC,EAAAA,EAAAA,MAACG,EAAAA,EAAS,CAAEC,QAAQ,WAAUf,SAAA,CAAC,YAE7BD,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACSC,KAAK,WAClBP,KAAK,WACLQ,UAAQ,KAEVnB,EAAAA,EAAAA,KAAA,QAAAC,UACED,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CAACT,KAAK,mBAGvBX,EAAAA,EAAAA,KAACf,EAAM,CAAEiC,KAAK,SAAQjB,SAAC,mBAOjC,EC5Ee,SAASoB,IACtB,OACET,EAAAA,EAAAA,MAAA,OAAAX,SAAA,EACED,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAAArB,UACLD,EAAAA,EAAAA,KAAA,SAAAC,SAAO,oBAETD,EAAAA,EAAAA,KAACH,EAAY,MAGnB,C","sources":["../node_modules/@chakra-ui/layout/src/box.tsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import styled from \"styled-components\"\n\nexport const RegBtn = styled.button`\nbackground-color: lightblue;\npadding: 0;\nborder-radius: 5px;\nwidth:60px;\nheight:20px;\n  font-size: 12px;\n  font-weight: 700; \n  border:none;\n  outline: solid grey 1px;\n\n  &:hover {\n background-color:lightgreen;\n  }\n\n`\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport * as Yup from 'yup';\nimport { Input, FormLabel, Box } from '@chakra-ui/react';\nimport { RegBtn } from './RegisterForm.styled';\n\n\n\nconst initialValues = { username: '', email: '', password: '' };\nconst schema = Yup.object().shape({\n  username: Yup.string(),\n  email: Yup.string().email(),\n  password: Yup.string().min(7, 'Too short password!'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values)\n    dispatch(\n      register({\n        name: values.username,\n        email: values.email,\n        password: values.password,\n      })\n    );\n    resetForm();\n  };\n  return (\n    <Box >\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form  autoComplete=\"off\">\n          <FormLabel  htmlFor=\"username\">\n            Username\n            <Input\n              \n              type=\"text\"\n              name=\"username\"\n              required\n            />\n            <span >\n              <ErrorMessage name=\"username\" />\n            </span>\n          </FormLabel>\n          <FormLabel htmlFor=\"email\">\n            Email\n            <Input\n                            type=\"email\"\n              name=\"email\"\n              required\n            />\n            <span >\n              <ErrorMessage name=\"email\" />\n            </span>\n          </FormLabel>\n          <FormLabel  htmlFor=\"password\">\n            Password\n            <Input\n                           type=\"password\"\n              name=\"password\"\n              required\n            />\n            <span >\n              <ErrorMessage name=\"password\" />\n            </span>\n          </FormLabel>\n          <RegBtn  type=\"submit\">\n            Register\n          </RegBtn>\n        </Form>\n      </Formik>\n    </Box>\n  );\n};","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}"],"names":["Box","chakra","displayName","Square","forwardRef","props","ref","size","_props$centerContent","centerContent","rest","styles","display","alignItems","justifyContent","boxSize","__css","flexShrink","flexGrow","borderRadius","RegBtn","styled","_templateObject","_taggedTemplateLiteral","initialValues","username","email","password","schema","Yup","shape","min","RegisterForm","dispatch","useDispatch","_jsx","children","Formik","validationSchema","onSubmit","values","_ref","resetForm","console","log","register","name","_jsxs","Form","autoComplete","FormLabel","htmlFor","Input","type","required","ErrorMessage","Register","Helmet"],"sourceRoot":""}