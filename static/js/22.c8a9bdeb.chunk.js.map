{"version":3,"file":"static/js/22.c8a9bdeb.chunk.js","mappings":"iXAgCaA,GAAYC,EAAAA,EAAAA,IAAoC,SAC3DC,EACAC,GAlCF,MAoCQC,GAASC,EAAAA,EAAAA,IAAe,YAAaH,GACrCI,GAAQC,EAAAA,EAAAA,IAAiBL,GAI7BM,GAIEF,EALFG,UAKEH,EAJFE,UAAAE,EAIEJ,EAHFK,kBAAAA,OAAAA,IAAoB,YAACC,EAAAA,CAAAA,GAAkB,EAAAC,EAGrCP,EAFFQ,kBAAAA,OAAAA,IAAoB,SACjBC,GAAAA,EAAAA,EAAAA,GACDT,EAAAA,GAEEU,GAAQC,EAAAA,EAAAA,MACRC,EAAW,OAAAC,EAAAA,MAAAA,OAAAA,EAAAA,EAAOC,cAAcL,EAAMZ,IAA3B,WAAqCA,IAAAA,GAAQY,GAE9D,OACE,UAACM,EAAAA,EAAAA,OAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACPJ,GAAAA,CAAAA,EAAAA,CACJT,WAAWc,EAAAA,EAAAA,IAAG,qBAAsBjB,EAAMG,WAC1Ce,OAAAA,EAAAA,EAAAA,GAAAA,CACEC,QAAS,QACTC,UAAW,SACRtB,GAGJI,SAAAA,CAAAA,GACAQ,MAAAA,OAAAA,EAAAA,EAAOW,YAAahB,EAAoBG,KAG/C,IAEAd,EAAU4B,YAAc,YAQjB,IAAMhB,GAAoBX,EAAAA,EAAAA,IAC/B,SAA2BK,EAAOH,GAChC,IAAMa,GAAQC,EAAAA,EAAAA,MACRb,GAASyB,EAAAA,EAAAA,KAEf,KAAKb,MAAAA,OAAAA,EAAAA,EAAOW,YAAY,OAAO,KAE/B,IAAMlB,GAAYc,EAAAA,EAAAA,IAAG,kCAAmCjB,EAAMG,WAE9D,OACE,SAACY,EAAAA,EAAAA,MAAWS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACNd,MAAAA,OAAAA,EAAAA,EAAOe,0BAA0BzB,EAAOH,IAAAA,CAAAA,EAAAA,CAC5CqB,MAAOpB,EAAOO,kBACdF,UAAAA,IAGN,IAGFG,EAAkBgB,YAAc,oB,mBC7FfI,EAAWC,EAAQ,MAA5BC,QACKC,EAAWH,EAAOI,OAAMC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kQAiBtBC,EAAOP,EAAOQ,KAAIC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2BAIpBI,EAAQV,EAAOW,MAAKC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yFChBpBO,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACEC,EAAAA,EAAAA,MAACT,EAAI,CAAEU,SAbY,SAAAC,GACnBA,EAAEC,iBACF,IAAMX,EAAOU,EAAEE,cACfN,GACEO,EAAAA,EAAAA,IAAM,CACJC,MAAOd,EAAKe,SAASD,MAAME,MAC3BC,SAAUjB,EAAKe,SAASE,SAASD,SAGrChB,EAAKkB,OACP,EAGiCC,aAAa,MAAKnD,SAAA,EAC/CwC,EAAAA,EAAAA,MAAChD,EAAS,CAAAQ,SAAA,CAAE,SAEVoD,EAAAA,EAAAA,KAAClB,EAAK,CAACmB,KAAK,QAAQC,KAAK,cAE3Bd,EAAAA,EAAAA,MAAChD,EAAS,CAAAQ,SAAA,CAAE,YAEVoD,EAAAA,EAAAA,KAAClB,EAAK,CAACmB,KAAK,WAAWC,KAAK,iBAE9BF,EAAAA,EAAAA,KAACzB,EAAQ,CAAC0B,KAAK,SAAQrD,SAAC,aAG9B,EC/Be,SAASuD,IACtB,OACEf,EAAAA,EAAAA,MAAA,OAAAxC,SAAA,EACEoD,EAAAA,EAAAA,KAACI,EAAAA,EAAM,CAAAxD,UACLoD,EAAAA,EAAAA,KAAA,SAAApD,SAAO,aAEToD,EAAAA,EAAAA,KAACf,EAAS,MAGhB,C","sources":["../node_modules/@chakra-ui/form-control/src/form-label.tsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","const { default: styled } = require(\"styled-components\");\nexport const LoginBtn = styled.button`\nbackground-color: lightblue;\npadding: 0;\nmargin-top:10px;\nborder-radius: 5px;\nwidth:60px;\nheight:20px;\n  font-size: 12px;\n  font-weight: 700; \n  border:none;\n  outline: solid grey 1px;\n\n  &:hover {\n background-color:lightgreen;\n  }\n\n`\n  export const Form = styled.form`\nwidth: 320px;\n\n`\nexport const Input = styled.input`\nborder-radius: 5px;\nmargin-left:10px;\nmargin-top: 10px;\nmargin-left: 10px;\n`\n\n \n  \n\n\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { FormLabel } from '@chakra-ui/react';\nimport { LoginBtn, Form, Input } from './LoginForm.styled';\n\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form  onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormLabel >\n        Email\n        <Input type=\"email\" name=\"email\" />\n      </FormLabel>\n      <FormLabel >\n        Password\n        <Input type=\"password\" name=\"password\" />\n      </FormLabel>\n      <LoginBtn type=\"submit\">Log In</LoginBtn>\n    </Form>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["FormLabel","forwardRef","passedProps","ref","styles","useStyleConfig","props","omitThemingProps","children","className","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","chakra","label","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","styled","require","default","LoginBtn","button","_templateObject","_taggedTemplateLiteral","Form","form","_templateObject2","Input","input","_templateObject3","LoginForm","dispatch","useDispatch","_jsxs","onSubmit","e","preventDefault","currentTarget","logIn","email","elements","value","password","reset","autoComplete","_jsx","type","name","Login","Helmet"],"sourceRoot":""}